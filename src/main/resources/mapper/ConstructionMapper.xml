<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team_ingterior.ingterior.construction.mapper.ConstructionMapper">
    
    <select id="insertConstruction" parameterType="insertConstructionDTO" resultType="integer">
        INSERT INTO construction(
            construction_id
            ,usage
            ,name
            ,code
            ,creator_id
            ,reg_date
            ,status
        )
        SELECT
            nextval('construction_id_seq')
            ,#{usage}
            ,#{constructionName}
            ,#{constructionCode}
            ,#{memberId}
            ,now()
            ,1
        RETURNING construction_id
    </select>

    <select id="getConstructionByConstructionId" parameterType="integer" resultType="constructionResponseDTO">
        SELECT
            c.construction_id                   AS constructionId
            ,COALESCE(p.path||p.file_name,null) AS drawingImageUrl
            ,c.usage                            AS usage
            ,c.name                             AS name
            ,c.code                             AS code
            ,m.member_code                      AS memberCode
            ,c.reg_date ::timestamp             AS regDate
            ,c.updt_date ::timestamp            AS updtDate
            ,null                               AS memberThumnails
        FROM construction c
        JOIN member m on c.creator_id = m.member_id
        LEFT JOIN photo p on c.construction_id = p.object_id AND p.object_type = 'CONSTRUCTION' AND p.status = 1
        WHERE construction_id = #{constructionId}
        AND c.status = 1
    </select>

    <select id="getConsturctionsByMemberId" parameterType="integer" resultType="constructionsResponseDTO">
        WITH target AS (
            SELECT 
                c.construction_id,
                c.usage,
                c.name,
                c.code,
                m.member_code,
                (ce.liked = 1) as isLiked,
                (m.member_id = #{memberId}) AS isCreator,
                c.reg_date                
            FROM construction_entry ce
            JOIN construction c ON c.construction_id = ce.construction_id AND c.status = 1
            JOIN member m ON c.creator_id = m.member_id
            WHERE ce.member_id = #{memberId}
            AND c.status = 1
        )
        SELECT
            t.construction_id               AS constructionId
            ,t.usage                        AS usage
            ,t.name                         AS constructionName
            ,t.code                         AS constructionCode
            ,t.member_code                  AS memberCode
            ,t.isLiked                      AS isLiked
            ,t.isCreator                    AS isCreator
            ,t.reg_date                     AS regDate
            ,ARRAY_AGG(m.img_url)           AS memberImgUrls
        FROM target t
        JOIN construction_entry ce ON t.construction_id = ce.construction_id
        LEFT JOIN member m ON ce.member_id = m.member_id AND m.status = 1
        GROUP BY 1, 2, 3, 4, 5, 6, 7, 8
    </select>

    <update id="updateConstruction" parameterType="updateConstructionDTO">
        UPDATE construction SET
            usage = #{usage}
            ,name = #{name}
            ,updt_date = now()
        WHERE construction_id = #{constructionId}
        AND status = 1
    </update>

    <update id="deleteConstruction" parameterType="integer">
        UPDATE construction SET
            status = 0
        WHERE construction_id = #{constructionId}
        AND status = 1
    </update>

    <select id="joinConstruction" parameterType="joinConstructionDTO">
        INSERT INTO construction_entry(
            construction_entry_id
            ,construction_id
            ,member_id
            ,permission
            ,liked
        )
        SELECT
            nextval('construction_entry_id_seq')
            ,#{constructionId}
            ,#{memberId}
            ,#{permission}
            ,0
    </select>

    <select id="leaveConstruction" parameterType="leaveConstructionRequestDTO">
        DELETE FROM construction_entry
        WHERE construction_id = #{constructionId}
        AND member_id = #{memberId}
    </select>


    <select id="likeConstructionToggle"  parameterType="likeConstructionRequestDTO">
        UPDATE construction_entry SET 
            liked = CASE
                        WHEN liked = 1 THEN 0
                        ELSE 1
                    END
        WHERE construction_id = #{constructionId}
        AND member_id = #{memberId}
    </select>

    <select id="updatePermission" parameterType="updatePermissionRequestDTO">
        UPDATE construction_entry SET
            permission = #{permission}
        WHERE construction_id = #{constructionId}
        AND member_id = #{targetMemberId}
    </select>

    <select id="getMemberThumnailsByConstructionId" parameterType="integer" resultType="memberThumnailsResponseDTO">
        SELECT
            m.member_id                 AS memberId
            ,m.member_code              AS memberCode
            ,m.img_url                  AS imgUrl
            ,ce.permission              AS permission
        FROM construction c
        JOIN construction_entry ce on c.construction_id = ce.construction_id
        JOIN member m on m.member_id = ce.member_id
        WHERE c.construction_id = #{constructionId}
    </select>


</mapper>